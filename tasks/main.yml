---
# Variable setup.
- name: Include OS-Specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Define jenkins_repo_url
  set_fact:
    jenkins_repo_url: "{{ __jenkins_repo_url }}"
  when: jenkins_repo_url is not defined

- name: Define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: "{{ __jenkins_repo_key_url }}"
  when: jenkins_repo_key_url is not defined

- name: Define jenkins_pkg_url
  set_fact:
    jenkins_pkg_url: "{{ __jenkins_pkg_url }}"
  when: jenkins_pkg_url is not defined

# Setup/install tasks.
- include: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include: setup-Debian.yml
  when: ansible_os_family == 'Debian'

# Configure Jenkins init settings.
- include: settings.yml

# Make sure Jenkins starts, then configure Jenkins.
- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    state: absent


# Include proxy server settings file
- include: proxy.yml

# Update Jenkins and install configured plugins.
- include: plugins.yml

- set_fact:
    http_proxy: ''
    https_proxy: ''

- name: if proxy create the https_proxy arg
  set_fact:
    http_proxy: 'http_proxy={{ ops_webproxy }}'
    https_proxy: 'https_proxy={{ ops_webproxy }}'
  when: ops_webproxy is defined and (ops_webproxy|trim != '')

# Include jenkins enviroment file
- name: "Add Jenkins env file"
  template:
    src: "environment_file.cfg.j2"
    dest: "{{ jenkins_home }}/environment_file.cfg"
    owner: jenkins
    group: jenkins
    mode: 0755
  register: env_config

- name: "Create job to download job config and create/reconfigure them"
  jenkins_job:
    config:  "{{ lookup('template', 'templates/Update_Jenkins_Jobs.xml.j2') }}"
    name: Update_Jenkins_Jobs
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    url: http://localhost:8080

- name: "Add env file to global properties"
  blockinfile:
    dest: "{{ jenkins_home }}/config.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertbefore: "</hudson>"
    block: |
         <globalNodeProperties>
           <org.jenkinsci.plugins.envinject.EnvInjectNodeProperty plugin="envinject@latest">
             <unsetSystemVariables>false</unsetSystemVariables>
             <propertiesFilePath>/var/lib/jenkins/environment_file.cfg</propertiesFilePath>
           </org.jenkinsci.plugins.envinject.EnvInjectNodeProperty>
         </globalNodeProperties>
  notify: restart jenkins

- name: "Include ssh key var for production"
  include_var: "production_ssh_keys.yml"
  when: environ == "production"

- name: "Include ssh key var for non production"
  include_var: "non_production_ssh_keys.yml"
  when: environ != "production"

- name: Ensure .ssh directory exists.
  file: 
    dest: "{{ key_file | dirname }}"
    mode: 0700 
    owner: jenkins
    state: directory

- name: Install ssh key
  copy: 
    content: "{{ ssh_key }}" 
    dest: "{{ key_file }}"
    mode: 0600
    owner: jenkins
